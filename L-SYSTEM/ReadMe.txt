================================================================================
MICROSOFT 基础类库: L-SYSTEM 项目概述
===============================================================================

应用程序向导已为您创建了这个 L-SYSTEM 应用程序。此应用程序不仅演示 Microsoft 基础类的基本使用方法，还可作为您编写应用程序的起点。

本文件概要介绍组成 L-SYSTEM 应用程序的每个文件的内容。

L-SYSTEM.vcxproj
这是使用应用程序向导生成的 VC++ 项目的主项目文件。 
它包含生成该文件的 Visual C++ 的版本信息，以及有关使用应用程序向导选择的平台、配置和项目功能的信息。

L-SYSTEM.vcxproj.filters
    这是使用“应用程序向导”生成的 VC++ 项目筛选器文件。
    它包含有关项目文件与筛选器之间的关联信息。在 IDE 中，通过这种关联，在特定节点下以分组形式显示具有相似扩展名的文件。例如，“.cpp”文件与“源文件”筛选器关联。

L-SYSTEM.h
这是应用程序的主要头文件。它包括其他项目特定的头文件(包括 Resource.h)，并声明 CLSYSTEMApp 应用程序类。

L-SYSTEM.cpp
这是包含应用程序类 CLSYSTEMApp 的主要应用程序源文件。

L-SYSTEM.rc
这是程序使用的所有 Microsoft Windows 资源的列表。它包括 RES 子目录中存储的图标、位图和光标。此文件可以直接在 Microsoft Visual C++ 中进行编辑。项目资源位于 2052 中。

res\L-SYSTEM.ico
这是用作应用程序图标的图标文件。此图标包括在主要资源文件 L-SYSTEM.rc 中。

res\LSYSTEM.rc2
此文件包含不在 Microsoft Visual C++ 中进行编辑的资源。您应该将不可由资源编辑器编辑的所有资源放在此文件中。

/////////////////////////////////////////////////////////////////////////////

对于主框架窗口:
项目包含标准 MFC 界面。

MainFrm.h, MainFrm.cpp
这些文件包含框架类 CMainFrame，该类派生自
CFrameWnd 并控制所有 SDI 框架功能。

/////////////////////////////////////////////////////////////////////////////

应用程序向导创建一个文档类型和一个视图:

L-SYSTEMDoc.h，L-SYSTEMDoc.cpp - 文档
这些文件包含 CLSYSTEMDoc 类。编辑这些文件可以添加特殊文档数据并可实现文件保存和加载(通过 CLSYSTEMDoc::Serialize)。

L-SYSTEMView.h，L-SYSTEMView.cpp - 文档的视图
这些文件包含 CLSYSTEMView 类。
CLSYSTEMView 对象用于查看 CLSYSTEMDoc 对象。





/////////////////////////////////////////////////////////////////////////////

其他功能:

ActiveX 控件
应用程序包括对使用 ActiveX 控件的支持。

/////////////////////////////////////////////////////////////////////////////

其他标准文件:

StdAfx.h，StdAfx.cpp
这些文件用于生成名为 L-SYSTEM.pch 的预编译头 (PCH) 文件和名为 StdAfx.obj 的预编译类型文件。

Resource.h
这是标准头文件，它定义新的资源 ID。
Microsoft Visual C++ 读取并更新此文件。

L-SYSTEM.manifest
	应用程序清单文件供 Windows XP 用来描述应用程序
	对特定版本并行程序集的依赖性。加载程序使用此
	信息从程序集缓存加载适当的程序集或
	从应用程序加载私有信息。应用程序清单可能为了重新分发而作为
	与应用程序可执行文件安装在相同文件夹中的外部 .manifest 文件包括，
	也可能以资源的形式包括在该可执行文件中。 
/////////////////////////////////////////////////////////////////////////////

其他注释:

应用程序向导使用“TODO:”指示应添加或自定义的源代码部分。

如果应用程序在共享的 DLL 中使用 MFC，则需要重新发布这些 MFC DLL；如果应用程序所用的语言与操作系统的当前区域设置不同，则还需要重新发布对应的本地化资源 MFC100XXX.DLL。有关这两个主题的更多信息，请参见 MSDN 文档中有关 Redistributing Visual C++ applications (重新发布 Visual C++ 应用程序)的章节。

/////////////////////////////////////////////////////////////////////////////


F ：前进并画线
f ：前进但不画线
+ ：逆时针旋转一个角度
- ：顺时针旋转一个角度
[ ：将当前的方向和位置信息压栈
] ：从栈中弹出上一次压入的方向和位置信息
|：反向180度
#：按线段宽度的增量要求增加线段的宽度
!：按线段宽度的减量要求减少线段的宽度
@：按线段宽度作半径画一个点
>：按线段长度的比例因子乘线长
<：按线段长度的比例因子除线长
&：交换+和-的意义
(：按转动角度的增量减少角度的转动量
)：按转动角度的增量增加角度的转动量


实现这几个符号首先需要给龟图系统增加一个状态变量： 线段的宽度(这个一般在绘图语句中就有对应的函数(有的系统是作为绘制线段的参数)，绘制线段的时候调用一下就好)。
增加几个绘图中不变的参数：
1. 宽度增量
2. 长度比例因子
3. 转动增量

而原来在绘图中不变的参数线段长度(你的程序里叫步长)、转动角度则会在遇到相应的符号时发生改变。

遇到这些符号就做如下的计算：
|   这个相当于++或--，可以说是一种简写。
#   线段宽度 += 线段宽度增量
!    线段宽度 -= 线段宽度增量
@   以当前位置为中心，线段宽带为半径画一个实心圆(由于圆的直径是线段宽带*2，所以看起来是一个突出一点的结，在比较密得情况下，可以加深一些区域)。
>   线段长度 *= 比例因子
<   线段长度 /=比例因子
&   以后的作图过程中，+如果原来是向左转就变成像右转，如果是向右转就变成向左转，-的情况也是如此。
(   转动角度 += 转动增量
)   转动角度 -= 转动增量

每次迭代的时候要线段长度和转动角度要恢复到初始值。

因为用这些符号做的图很少，所以也很少有人实现(当然，也可能是因为实现的人很少，所以也少有人用了作图)。
你也可以自己增加一些符号来实现别的操作。
